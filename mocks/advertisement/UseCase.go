// Code generated by mockery v2.40.1. DO NOT EDIT.

package advertisement

import (
	advertisement "github.com/MarkLai0317/Advertising/advertisement"
	mock "github.com/stretchr/testify/mock"
)

// UseCase is an autogenerated mock type for the UseCase type
type UseCase struct {
	mock.Mock
}

type UseCase_Expecter struct {
	mock *mock.Mock
}

func (_m *UseCase) EXPECT() *UseCase_Expecter {
	return &UseCase_Expecter{mock: &_m.Mock}
}

// Advertise provides a mock function with given fields: client, offset, limit
func (_m *UseCase) Advertise(client *advertisement.Client, offset int, limit int) ([]advertisement.Advertisement, error) {
	ret := _m.Called(client, offset, limit)

	if len(ret) == 0 {
		panic("no return value specified for Advertise")
	}

	var r0 []advertisement.Advertisement
	var r1 error
	if rf, ok := ret.Get(0).(func(*advertisement.Client, int, int) ([]advertisement.Advertisement, error)); ok {
		return rf(client, offset, limit)
	}
	if rf, ok := ret.Get(0).(func(*advertisement.Client, int, int) []advertisement.Advertisement); ok {
		r0 = rf(client, offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]advertisement.Advertisement)
		}
	}

	if rf, ok := ret.Get(1).(func(*advertisement.Client, int, int) error); ok {
		r1 = rf(client, offset, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UseCase_Advertise_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Advertise'
type UseCase_Advertise_Call struct {
	*mock.Call
}

// Advertise is a helper method to define mock.On call
//   - client *advertisement.Client
//   - offset int
//   - limit int
func (_e *UseCase_Expecter) Advertise(client interface{}, offset interface{}, limit interface{}) *UseCase_Advertise_Call {
	return &UseCase_Advertise_Call{Call: _e.mock.On("Advertise", client, offset, limit)}
}

func (_c *UseCase_Advertise_Call) Run(run func(client *advertisement.Client, offset int, limit int)) *UseCase_Advertise_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*advertisement.Client), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *UseCase_Advertise_Call) Return(_a0 []advertisement.Advertisement, _a1 error) *UseCase_Advertise_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UseCase_Advertise_Call) RunAndReturn(run func(*advertisement.Client, int, int) ([]advertisement.Advertisement, error)) *UseCase_Advertise_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ad
func (_m *UseCase) Create(ad *advertisement.Advertisement) error {
	ret := _m.Called(ad)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*advertisement.Advertisement) error); ok {
		r0 = rf(ad)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UseCase_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type UseCase_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ad *advertisement.Advertisement
func (_e *UseCase_Expecter) Create(ad interface{}) *UseCase_Create_Call {
	return &UseCase_Create_Call{Call: _e.mock.On("Create", ad)}
}

func (_c *UseCase_Create_Call) Run(run func(ad *advertisement.Advertisement)) *UseCase_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*advertisement.Advertisement))
	})
	return _c
}

func (_c *UseCase_Create_Call) Return(_a0 error) *UseCase_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UseCase_Create_Call) RunAndReturn(run func(*advertisement.Advertisement) error) *UseCase_Create_Call {
	_c.Call.Return(run)
	return _c
}

// NewUseCase creates a new instance of UseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *UseCase {
	mock := &UseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
