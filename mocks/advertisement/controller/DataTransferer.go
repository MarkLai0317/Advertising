// Code generated by mockery v2.40.1. DO NOT EDIT.

package controller

import (
	advertisement "github.com/MarkLai0317/Advertising/advertisement"
	controller "github.com/MarkLai0317/Advertising/advertisement/controller"

	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// DataTransferer is an autogenerated mock type for the DataTransferer type
type DataTransferer struct {
	mock.Mock
}

type DataTransferer_Expecter struct {
	mock *mock.Mock
}

func (_m *DataTransferer) EXPECT() *DataTransferer_Expecter {
	return &DataTransferer_Expecter{mock: &_m.Mock}
}

// AdvertisementSliceToJSON provides a mock function with given fields: ads
func (_m *DataTransferer) AdvertisementSliceToJSON(ads []advertisement.Advertisement) (*controller.AdvertisementResponse, error) {
	ret := _m.Called(ads)

	if len(ret) == 0 {
		panic("no return value specified for AdvertisementSliceToJSON")
	}

	var r0 *controller.AdvertisementResponse
	var r1 error
	if rf, ok := ret.Get(0).(func([]advertisement.Advertisement) (*controller.AdvertisementResponse, error)); ok {
		return rf(ads)
	}
	if rf, ok := ret.Get(0).(func([]advertisement.Advertisement) *controller.AdvertisementResponse); ok {
		r0 = rf(ads)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*controller.AdvertisementResponse)
		}
	}

	if rf, ok := ret.Get(1).(func([]advertisement.Advertisement) error); ok {
		r1 = rf(ads)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DataTransferer_AdvertisementSliceToJSON_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AdvertisementSliceToJSON'
type DataTransferer_AdvertisementSliceToJSON_Call struct {
	*mock.Call
}

// AdvertisementSliceToJSON is a helper method to define mock.On call
//   - ads []advertisement.Advertisement
func (_e *DataTransferer_Expecter) AdvertisementSliceToJSON(ads interface{}) *DataTransferer_AdvertisementSliceToJSON_Call {
	return &DataTransferer_AdvertisementSliceToJSON_Call{Call: _e.mock.On("AdvertisementSliceToJSON", ads)}
}

func (_c *DataTransferer_AdvertisementSliceToJSON_Call) Run(run func(ads []advertisement.Advertisement)) *DataTransferer_AdvertisementSliceToJSON_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]advertisement.Advertisement))
	})
	return _c
}

func (_c *DataTransferer_AdvertisementSliceToJSON_Call) Return(_a0 *controller.AdvertisementResponse, _a1 error) *DataTransferer_AdvertisementSliceToJSON_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DataTransferer_AdvertisementSliceToJSON_Call) RunAndReturn(run func([]advertisement.Advertisement) (*controller.AdvertisementResponse, error)) *DataTransferer_AdvertisementSliceToJSON_Call {
	_c.Call.Return(run)
	return _c
}

// JSONToAdvertisement provides a mock function with given fields: req
func (_m *DataTransferer) JSONToAdvertisement(req *http.Request) (*advertisement.Advertisement, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for JSONToAdvertisement")
	}

	var r0 *advertisement.Advertisement
	var r1 error
	if rf, ok := ret.Get(0).(func(*http.Request) (*advertisement.Advertisement, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(*http.Request) *advertisement.Advertisement); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*advertisement.Advertisement)
		}
	}

	if rf, ok := ret.Get(1).(func(*http.Request) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DataTransferer_JSONToAdvertisement_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSONToAdvertisement'
type DataTransferer_JSONToAdvertisement_Call struct {
	*mock.Call
}

// JSONToAdvertisement is a helper method to define mock.On call
//   - req *http.Request
func (_e *DataTransferer_Expecter) JSONToAdvertisement(req interface{}) *DataTransferer_JSONToAdvertisement_Call {
	return &DataTransferer_JSONToAdvertisement_Call{Call: _e.mock.On("JSONToAdvertisement", req)}
}

func (_c *DataTransferer_JSONToAdvertisement_Call) Run(run func(req *http.Request)) *DataTransferer_JSONToAdvertisement_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*http.Request))
	})
	return _c
}

func (_c *DataTransferer_JSONToAdvertisement_Call) Return(_a0 *advertisement.Advertisement, _a1 error) *DataTransferer_JSONToAdvertisement_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DataTransferer_JSONToAdvertisement_Call) RunAndReturn(run func(*http.Request) (*advertisement.Advertisement, error)) *DataTransferer_JSONToAdvertisement_Call {
	_c.Call.Return(run)
	return _c
}

// QueryToClient provides a mock function with given fields: req
func (_m *DataTransferer) QueryToClient(req *http.Request) (*advertisement.Client, int, int, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for QueryToClient")
	}

	var r0 *advertisement.Client
	var r1 int
	var r2 int
	var r3 error
	if rf, ok := ret.Get(0).(func(*http.Request) (*advertisement.Client, int, int, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(*http.Request) *advertisement.Client); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*advertisement.Client)
		}
	}

	if rf, ok := ret.Get(1).(func(*http.Request) int); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(*http.Request) int); ok {
		r2 = rf(req)
	} else {
		r2 = ret.Get(2).(int)
	}

	if rf, ok := ret.Get(3).(func(*http.Request) error); ok {
		r3 = rf(req)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// DataTransferer_QueryToClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryToClient'
type DataTransferer_QueryToClient_Call struct {
	*mock.Call
}

// QueryToClient is a helper method to define mock.On call
//   - req *http.Request
func (_e *DataTransferer_Expecter) QueryToClient(req interface{}) *DataTransferer_QueryToClient_Call {
	return &DataTransferer_QueryToClient_Call{Call: _e.mock.On("QueryToClient", req)}
}

func (_c *DataTransferer_QueryToClient_Call) Run(run func(req *http.Request)) *DataTransferer_QueryToClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*http.Request))
	})
	return _c
}

func (_c *DataTransferer_QueryToClient_Call) Return(client *advertisement.Client, offset int, limit int, err error) *DataTransferer_QueryToClient_Call {
	_c.Call.Return(client, offset, limit, err)
	return _c
}

func (_c *DataTransferer_QueryToClient_Call) RunAndReturn(run func(*http.Request) (*advertisement.Client, int, int, error)) *DataTransferer_QueryToClient_Call {
	_c.Call.Return(run)
	return _c
}

// NewDataTransferer creates a new instance of DataTransferer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDataTransferer(t interface {
	mock.TestingT
	Cleanup(func())
}) *DataTransferer {
	mock := &DataTransferer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
