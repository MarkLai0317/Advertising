// Code generated by mockery v2.40.1. DO NOT EDIT.

package ad

import (
	ad "github.com/MarkLai0317/Advertising/ad"
	mock "github.com/stretchr/testify/mock"
)

// Validator is an autogenerated mock type for the Validator type
type Validator struct {
	mock.Mock
}

type Validator_Expecter struct {
	mock *mock.Mock
}

func (_m *Validator) EXPECT() *Validator_Expecter {
	return &Validator_Expecter{mock: &_m.Mock}
}

// ValidateCountrySlice provides a mock function with given fields: slice
func (_m *Validator) ValidateCountrySlice(slice []ad.CountryCode) error {
	ret := _m.Called(slice)

	if len(ret) == 0 {
		panic("no return value specified for ValidateCountrySlice")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]ad.CountryCode) error); ok {
		r0 = rf(slice)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Validator_ValidateCountrySlice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateCountrySlice'
type Validator_ValidateCountrySlice_Call struct {
	*mock.Call
}

// ValidateCountrySlice is a helper method to define mock.On call
//   - slice []ad.CountryCode
func (_e *Validator_Expecter) ValidateCountrySlice(slice interface{}) *Validator_ValidateCountrySlice_Call {
	return &Validator_ValidateCountrySlice_Call{Call: _e.mock.On("ValidateCountrySlice", slice)}
}

func (_c *Validator_ValidateCountrySlice_Call) Run(run func(slice []ad.CountryCode)) *Validator_ValidateCountrySlice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]ad.CountryCode))
	})
	return _c
}

func (_c *Validator_ValidateCountrySlice_Call) Return(_a0 error) *Validator_ValidateCountrySlice_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Validator_ValidateCountrySlice_Call) RunAndReturn(run func([]ad.CountryCode) error) *Validator_ValidateCountrySlice_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateGenderSlice provides a mock function with given fields: slice
func (_m *Validator) ValidateGenderSlice(slice []ad.GenderType) error {
	ret := _m.Called(slice)

	if len(ret) == 0 {
		panic("no return value specified for ValidateGenderSlice")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]ad.GenderType) error); ok {
		r0 = rf(slice)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Validator_ValidateGenderSlice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateGenderSlice'
type Validator_ValidateGenderSlice_Call struct {
	*mock.Call
}

// ValidateGenderSlice is a helper method to define mock.On call
//   - slice []ad.GenderType
func (_e *Validator_Expecter) ValidateGenderSlice(slice interface{}) *Validator_ValidateGenderSlice_Call {
	return &Validator_ValidateGenderSlice_Call{Call: _e.mock.On("ValidateGenderSlice", slice)}
}

func (_c *Validator_ValidateGenderSlice_Call) Run(run func(slice []ad.GenderType)) *Validator_ValidateGenderSlice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]ad.GenderType))
	})
	return _c
}

func (_c *Validator_ValidateGenderSlice_Call) Return(_a0 error) *Validator_ValidateGenderSlice_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Validator_ValidateGenderSlice_Call) RunAndReturn(run func([]ad.GenderType) error) *Validator_ValidateGenderSlice_Call {
	_c.Call.Return(run)
	return _c
}

// ValidatePlatformSlice provides a mock function with given fields: slice
func (_m *Validator) ValidatePlatformSlice(slice []ad.PlatformType) error {
	ret := _m.Called(slice)

	if len(ret) == 0 {
		panic("no return value specified for ValidatePlatformSlice")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]ad.PlatformType) error); ok {
		r0 = rf(slice)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Validator_ValidatePlatformSlice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidatePlatformSlice'
type Validator_ValidatePlatformSlice_Call struct {
	*mock.Call
}

// ValidatePlatformSlice is a helper method to define mock.On call
//   - slice []ad.PlatformType
func (_e *Validator_Expecter) ValidatePlatformSlice(slice interface{}) *Validator_ValidatePlatformSlice_Call {
	return &Validator_ValidatePlatformSlice_Call{Call: _e.mock.On("ValidatePlatformSlice", slice)}
}

func (_c *Validator_ValidatePlatformSlice_Call) Run(run func(slice []ad.PlatformType)) *Validator_ValidatePlatformSlice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]ad.PlatformType))
	})
	return _c
}

func (_c *Validator_ValidatePlatformSlice_Call) Return(_a0 error) *Validator_ValidatePlatformSlice_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Validator_ValidatePlatformSlice_Call) RunAndReturn(run func([]ad.PlatformType) error) *Validator_ValidatePlatformSlice_Call {
	_c.Call.Return(run)
	return _c
}

// NewValidator creates a new instance of Validator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewValidator(t interface {
	mock.TestingT
	Cleanup(func())
}) *Validator {
	mock := &Validator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
