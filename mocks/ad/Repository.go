// Code generated by mockery v2.40.1. DO NOT EDIT.

package ad

import (
	ad "github.com/MarkLai0317/Advertising/ad"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

type Repository_Expecter struct {
	mock *mock.Mock
}

func (_m *Repository) EXPECT() *Repository_Expecter {
	return &Repository_Expecter{mock: &_m.Mock}
}

// CreateAdvertisement provides a mock function with given fields: advertisement
func (_m *Repository) CreateAdvertisement(advertisement *ad.Advertisement) error {
	ret := _m.Called(advertisement)

	if len(ret) == 0 {
		panic("no return value specified for CreateAdvertisement")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*ad.Advertisement) error); ok {
		r0 = rf(advertisement)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_CreateAdvertisement_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAdvertisement'
type Repository_CreateAdvertisement_Call struct {
	*mock.Call
}

// CreateAdvertisement is a helper method to define mock.On call
//   - advertisement *ad.Advertisement
func (_e *Repository_Expecter) CreateAdvertisement(advertisement interface{}) *Repository_CreateAdvertisement_Call {
	return &Repository_CreateAdvertisement_Call{Call: _e.mock.On("CreateAdvertisement", advertisement)}
}

func (_c *Repository_CreateAdvertisement_Call) Run(run func(advertisement *ad.Advertisement)) *Repository_CreateAdvertisement_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*ad.Advertisement))
	})
	return _c
}

func (_c *Repository_CreateAdvertisement_Call) Return(_a0 error) *Repository_CreateAdvertisement_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_CreateAdvertisement_Call) RunAndReturn(run func(*ad.Advertisement) error) *Repository_CreateAdvertisement_Call {
	_c.Call.Return(run)
	return _c
}

// GetAdvertisements provides a mock function with given fields: client, now
func (_m *Repository) GetAdvertisements(client *ad.Client, now time.Time) ([]ad.Advertisement, error) {
	ret := _m.Called(client, now)

	if len(ret) == 0 {
		panic("no return value specified for GetAdvertisements")
	}

	var r0 []ad.Advertisement
	var r1 error
	if rf, ok := ret.Get(0).(func(*ad.Client, time.Time) ([]ad.Advertisement, error)); ok {
		return rf(client, now)
	}
	if rf, ok := ret.Get(0).(func(*ad.Client, time.Time) []ad.Advertisement); ok {
		r0 = rf(client, now)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ad.Advertisement)
		}
	}

	if rf, ok := ret.Get(1).(func(*ad.Client, time.Time) error); ok {
		r1 = rf(client, now)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_GetAdvertisements_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAdvertisements'
type Repository_GetAdvertisements_Call struct {
	*mock.Call
}

// GetAdvertisements is a helper method to define mock.On call
//   - client *ad.Client
//   - now time.Time
func (_e *Repository_Expecter) GetAdvertisements(client interface{}, now interface{}) *Repository_GetAdvertisements_Call {
	return &Repository_GetAdvertisements_Call{Call: _e.mock.On("GetAdvertisements", client, now)}
}

func (_c *Repository_GetAdvertisements_Call) Run(run func(client *ad.Client, now time.Time)) *Repository_GetAdvertisements_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*ad.Client), args[1].(time.Time))
	})
	return _c
}

func (_c *Repository_GetAdvertisements_Call) Return(_a0 []ad.Advertisement, _a1 error) *Repository_GetAdvertisements_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_GetAdvertisements_Call) RunAndReturn(run func(*ad.Client, time.Time) ([]ad.Advertisement, error)) *Repository_GetAdvertisements_Call {
	_c.Call.Return(run)
	return _c
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
